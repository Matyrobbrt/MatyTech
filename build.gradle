import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
	repositories {
		maven { url = 'https://maven.parchmentmc.org' }
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'org.parchmentmc:librarian:1.+'
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
	}
}

plugins {
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.4'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

sourceSets {
	api {
		//The API has no resources
		resources.srcDirs = []
	}
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources {
			srcDirs = [
				"$rootDir/src/main/resources",
				"$rootDir/src/generated/resources"
			]
			exclude '.cache'
		}
	}
	test {
		//The test module has no resources
		resources.srcDirs = []
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

version = "${version}"
group = 'com.matyrobbrt.matytech'
archivesBaseName = "${mod_id}-${mc_version}"

def props = new Properties()
if (file(".env").exists()) {
	file(".env").withInputStream { props.load(it) }
} else {
	file("default.env").withInputStream { props.load(it) }
}

mixin {
	add sourceSets.main, "matytech.refmap.json"
	config "matytech.mixins.json"

	debug.verbose = true
	debug.export = true
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	mappings channel: 'parchment', version: '2021.10.17-1.16.5'

	runs {
		client {
			workingDirectory project.file('run/client')
			arg "-mixin.config=matytech.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

			mods {
				matytech.sources((SourceSet[]) [
					sourceSets.main,
					sourceSets.api
				])
			}
		}

		server {
			workingDirectory project.file('run/server')
			arg "-mixin.config=matytech.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

			mods {
				matytech.sources((SourceSet[]) [
					sourceSets.main,
					sourceSets.api
				])
			}
		}

		data {
			workingDirectory project.file('run/client')
			arg "-mixin.config=matytech.mixins.json"
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'matytech', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				matytech.sources((SourceSet[]) [
					sourceSets.main,
					sourceSets.api
				])
			}
		}

		test {
			parent runs.client
			arg "-mixin.config=matytech.mixins.json"
			workingDirectory project.file('run/test')
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

			environment 'MOD_CLASSES', 'dummy'

			main 'net.minecraftforge.userdev.LaunchTesting'

			mods {
				matytech.sources((SourceSet[]) [
					sourceSets.main,
					sourceSets.api,
					sourceSets.test
				])
			}
		}
	}
}

license {
	header = file("$rootDir/header.txt")
	properties {
		name = 'Matyrobbrt'
		year = 2021
	}

	include '**/*.java'

	style {
		java = 'JAVADOC'
	}

	tasks {
		main {
			files.from files("$rootDir/src/main/java")
		}
	}
}


def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }
	//Copy it into the build dir
	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': version
	}
	it.into "$buildDir/resources/main/"
}

classes.configure {
	dependsOn(replaceResources)
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	exclude('META-INF/mods.toml')
	configure { finalizedBy(replaceResources) }
}

task makeChangelog(type: GitChangelogTask) {
	fromRepo = file("$projectDir")
	file = file('changelog.html')
	untaggedName = "Current release ${version}"
	fromCommit = "${changelog_commit_start}"
	toRef = "${mc_version}"
	templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
	apiKey = props.getProperty('CURSEFORGE_KEY')
	project {
		id = "${curse_project_id}"
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = "${release_type}"
		addGameVersion "${mc_version}"
		relations {
			requiredLibrary 'matylib'
			optionalLibrary 'the-one-probe'
		}
	}
}

afterEvaluate {
	// TODO: when I have a CF project
	// tasks.curseforge556554.dependsOn makeChangelog
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url "https://dl.cloudsmith.io/public/matyrobbrt/matylib/maven/"
	}
	maven {
		name 'tterrag maven'
		url "http://maven.tterrag.com/"
		allowInsecureProtocol = true
	}
	maven {
		url "https://www.cursemaven.com"
	}
	maven { url 'https://modmaven.dev/' }
	maven {
		url "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		url "https://modmaven.k-4u.nl"
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	implementation fg.deobf("com.matyrobbrt:matylib-${mc_version}:${matylib_version}")

	implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}") {
		transitive = false
	})

	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

	compileOnly "mekanism:Mekanism:${mc_version}-${mekanism_version}:api"
	runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")

	annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	from sourceSets.main.output
	from sourceSets.api.output
	manifest {
		attributes([
			"Specification-Title": "MatyTech",
			"Specification-Vendor": "matyrobbrt",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": "matytech",
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"matyrobbrt",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "matytech.mixins.json"
		])
	}
	destinationDirectory = file("$rootDir/build-out/${mc_version}/")
	finalizedBy 'reobfJar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('javadoc')
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('sources')
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('api')
	from sourceSets.api.output
	afterEvaluate { finalizedBy reobfApiJar }

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('deobf')
	from sourceSets.main.output
	from sourceSets.api.output
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
	archives deobfJar
}

reobf {
	apiJar { classpath.from(sourceSets.api.compileClasspath) }
	jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
	dependsOn reobfJar
	dependsOn reobfApiJar
}

jar.finalizedBy('reobfJar')
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}

test {
	useJUnitPlatform()
	include 'com/matyrobbrt/matytech/**'
}